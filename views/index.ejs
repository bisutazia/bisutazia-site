<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover" />
  <title>ピカイチ投票｜あなたの1票でヒーローを生む</title>
  <meta name="description" content="SNSから今すぐ1タップ！Jリーグ・WEリーグの試合ごとに“1番輝いた選手”へピカイチ投票。あなたの1票がヒーローを生む。締切前に投票しよう。" />
  <meta property="og:title" content="ピカイチ投票｜SNSから1タップで推しをヒーローに" />
  <meta property="og:description" content="今この試合で1番輝いた選手に1タップ投票！あなたの1票でヒーロー誕生。J/WE全対応。" />
  <meta property="og:type" content="website" />
  <meta property="og:url" content="https://bisutazia.com/" />
  <meta property="og:image" content="https://bisutazia.com/ogp.png" />
  <meta name="twitter:card" content="summary_large_image" />
  <meta name="twitter:title" content="ピカイチ投票 | SNSサポの熱で1番輝いた選手に1タップ投票" />
  <meta name="twitter:description" content="あなたの“1票”が選手の誇りに。締切前に投票しよう！" />
  <meta name="twitter:image" content="https://bisutazia.com/ogp.png" />
  <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@400;700&display=swap" rel="stylesheet" />

  <style>
    :root {
      --primary: #0366d6;
      --accent: #ffbe16;
      --bg: #f9fafb;
      --card-bg: #fff;
      --text: #222;
      --shadow: 0 2px 24px rgba(0,0,0,0.13);
      --gold: #ffbe16;
      --gold-dark: #b88d0f;
      --gold-light: #ffe28a;
      --glass: rgba(255,255,255,0.85);
    }
    @media (prefers-reduced-motion: reduce) {
      * { animation: none !important; transition: none !important; }
    }
    html,body { height:100%; }
    body {
      margin: 0;
      font-family: 'Noto Sans JP',sans-serif;
      background: var(--bg);
      color: var(--text);
      min-height:100vh;
      -webkit-tap-highlight-color:transparent;
      overflow-x:hidden;
      font-size:17px;
    }
    header {
      background: var(--primary);
      color: #fff;
      padding: 0.36rem 0.5rem 0.2rem;
      text-align: left;
      box-shadow: var(--shadow);
      position:sticky; top:0; z-index:11;
      display:flex; align-items:center; gap:.4em;
      min-height: 44px;
    }
    .logo { max-height:22px; flex-shrink:0; }
    .site-title { font-size:1.02em; font-weight:700; letter-spacing:.02em; }

    main { max-width: 500px; margin: 0 auto; padding: 0 0.1em 5.2em; position:relative; z-index:1; }

    .hero {
      margin-top:4vw; margin-bottom: 1.1em;
      padding: 1.9em .6em 1.1em;
      border-radius: 1.6em; text-align: center;
      background: linear-gradient(120deg, var(--primary) 80%, var(--accent) 100%);
      color: #fff; box-shadow: var(--shadow); position:relative; overflow:hidden;
    }
    .hero h1 {
      font-size: 1.48em; margin: 0 0 .2em 0; font-weight: 900; line-height:1.22;
      text-shadow:0 2px 15px #0366d633, 0 0 16px #ffbe1640;
    }
    .hero p {
      margin: .6em 0 1em; font-size:1.08em; line-height:1.62; font-weight:500;
    }
    .timer {
      display:inline-block; background: var(--accent); color: var(--primary);
      font-size:.98em; font-weight:700; border-radius:8px;
      padding:.32em .86em; margin-bottom: .9em;
      box-shadow:0 0 12px #ffe0661a; letter-spacing:.01em;
    }

    /* リーグ選択（タイトル直下・金色統一） */
    .leagues-bar {
      display:flex; gap:.6em; justify-content:center; align-items:center;
      margin: .95em 0 .5em; padding:0; width:100%; flex-wrap:wrap;
    }
    .leagues-bar button{
      flex:1 1 80px; min-width:78px;
      background: linear-gradient(90deg,var(--gold) 60%,var(--gold-light) 100%);
      color: var(--primary); border:none; border-radius: 999px;
      font-size: 1.02em; font-weight: 800; padding: .64em 1em; margin:.12em 0;
      cursor:pointer; transition: background .15s, color .14s, box-shadow .15s;
      box-shadow:0 2px 8px #ffe06633; letter-spacing:.02em; outline:none;
    }
    .leagues-bar button.active, .leagues-bar button:focus {
      background:linear-gradient(90deg,#fffbe6 60%,var(--gold) 100%);
      color: var(--gold-dark); box-shadow:0 0 18px #ffe06688; border:2px solid var(--gold-dark);
    }

    .catch-nudge {
      margin: 1.05em auto .3em; background: var(--glass); color: var(--primary);
      font-size: 1.06em; border-left: 7px solid var(--accent);
      padding: .78em 1.1em; border-radius: 12px; font-weight: 700; text-align:center;
      box-shadow:0 2px 14px rgba(0,0,0,0.03); max-width:470px;
    }

    .match-list { margin: 1.05em 0 0; display:flex; flex-direction:column; gap: .98em; }
    .match-card {
      background: var(--card-bg); border-radius: 1.05em;
      box-shadow: 0 3px 20px rgba(0,0,0,0.09);
      padding: 1.02em .5em .7em; display:flex; flex-direction:column; align-items:center; justify-content:center;
      border-left: 6px solid var(--primary); position:relative; overflow:hidden;
      transition:box-shadow .14s,transform .13s;
    }
    .match-card h3 {
      font-size: 1.12em; color: var(--primary); margin: .2em 0 .38em; font-weight: 800; letter-spacing:.01em;
      text-align:center;
    }
    .vote-btn {
      background: linear-gradient(90deg,var(--accent) 65%,#fffbe6 100%); color: var(--primary);
      border:none; border-radius: 999px; padding: .97em 0; width: 97%;
      font-size: 1.09em; font-weight: 900; margin: .56em 0 .1em; cursor:pointer;
      transition: background .12s, color .12s, box-shadow .11s, transform .13s;
      box-shadow:0 2px 8px #ffe06651; letter-spacing:.015em;
    }
    .vote-btn:hover,.vote-btn:active{ background:linear-gradient(90deg,#ffe066 75%,#fffbe6 100%); transform:scale(1.03); box-shadow:0 0 17px #ffe06699; }

    .info-tip { font-size: .96em; color:#555; margin: 1em 0 .28em; text-align:center; }

    /* 下部固定ミニCTA（スクロール時） */
    .sticky-cta {
      position: fixed; left:0; right:0; bottom:0; z-index: 12;
      display:none; /* 初期は非表示 */
      padding: .5em .9em env(safe-area-inset-bottom);
      background: linear-gradient(180deg, #ffffffd9 0%, #ffffff 100%);
      box-shadow: 0 -6px 18px rgba(0,0,0,.08);
    }
    .sticky-cta .inner {
      max-width: 520px; margin:0 auto; display:flex; gap:.6em; align-items:center;
    }
    .sticky-cta .deadline {
      flex:0 0 auto; font-weight:800; color:var(--primary); font-size:.95em;
      background:#fff3c9; border-radius:8px; padding:.45em .6em;
    }
    .sticky-cta .go {
      flex:1 1 auto; text-align:center; font-weight:900; font-size:1.04em;
      background: linear-gradient(90deg,var(--accent) 70%,#fff1c0 100%); color:var(--primary);
      border:none; border-radius:999px; padding:.9em 1em; cursor:pointer;
      box-shadow:0 6px 18px #ffe06655;
    }

    /* レスポンシブ */
    @media (max-width:480px){
      body { font-size:15.7px;}
      header { padding:.22rem .18rem .12rem; }
      .logo { max-height:20px; }
      .hero{ padding:1.2em .2em .7em; }
      .leagues-bar button{ min-width:61px; font-size:1em; }
      .match-card{ padding:.5em .06em .6em; }
    }
  </style>
</head>
<body>
  <header>
    <img src="/logo.png" alt="ビスタジア ロゴ" class="logo" />
    <span class="site-title">ビスタジア</span>
  </header>

  <main>
    <section class="hero" id="hero">
      <h1>ピカイチ投票</h1>

      <!-- 金色リーグタブ（タイトル直下） -->
      <div class="leagues-bar" id="leagues">
        <button id="J1" onclick="showLeague('J1')">J1</button>
        <button id="J2" onclick="showLeague('J2')">J2</button>
        <button id="J3" onclick="showLeague('J3')">J3</button>
        <button id="WE" onclick="showLeague('WE')">WE</button>
        <button id="ルヴァンカップ" onclick="showLeague('ルヴァンカップ')">ルヴァン杯</button>
        <button id="その他" onclick="showLeague('その他')">その他</button>
      </div>

      <p>
        SNSで盛り上がった今、<b>この試合で1番輝いた選手</b>に投票しよう。<br>
        <span style="color:#fff;">あなたの“1票”がヒーローを生む。</span><br>
        締切までに<b>1タップで完了</b>。
      </p>

      <div class="timer" id="voteTimer">本日の投票 締切まで残り --:--</div>

      <button class="vote-btn" onclick="scrollToList()" aria-label="投票リストへ移動">
        ピカイチ投票をはじめる
      </button>
    </section>

    <div class="catch-nudge">
      あなたの投票が“公式化”の追い風に。<br>いまの熱を1タップで残そう。
    </div>

    <div class="match-list" id="matchList" aria-live="polite"></div>

    <div class="info-tip">
      投票後は <b>#ピカイチ投票 #ビスタジア</b> で拡散！次のヒーローが生まれる。
    </div>
  </main>

  <!-- スクロール時の下部固定ミニCTA（FOMO + 迷わず戻れる） -->
  <div class="sticky-cta" id="stickyCta" role="region" aria-label="投票ショートカット">
    <div class="inner">
      <div class="deadline" id="miniDeadline">本日締切</div>
      <button class="go" onclick="scrollToList()">投票リストを開く</button>
    </div>
  </div>

  <footer style="text-align:center; padding: 1.4em 0 .9em; color:#666;">
    非公式プロジェクトです（Jリーグ公式化を目指して運営中）<br>
    &copy; <script>document.write(new Date().getFullYear())</script> ビスタジア
  </footer>

  <script>
    // ---- データ注入 ----
    const matchesData = <%- JSON.stringify(matches) %>;

    // ---- ユーティリティ ----
    const qs = new URLSearchParams(location.search);
    const utm = ['utm_source','utm_medium','utm_campaign','utm_content','utm_term']
      .reduce((acc,k)=>{ if(qs.get(k)) acc[k]=qs.get(k); return acc; }, {});
    const utmQuery = Object.keys(utm).length ? ('?' + new URLSearchParams(utm).toString()) : '';

    function buildMatchUrl(id){
      // league引継ぎ + UTMも継承
      const league = currentLeague || qs.get('league');
      const p = new URLSearchParams({ ...(league?{league}:{}), ...utm });
      return `/match/${id}${p.toString()?('?'+p.toString()):''}`;
    }

    // ---- リーグ表示 ----
    let currentLeague = null;

    function showLeague(league) {
      currentLeague = league;
      // 視覚状態
      document.querySelectorAll('.leagues-bar button').forEach(btn=>btn.classList.remove('active'));
      const active = document.getElementById(league);
      if(active) active.classList.add('active');

      // 永続化（次回来訪の一貫性）
      try { sessionStorage.setItem('lastLeague', league); } catch(e){}

      // リスト描画
      const list = document.getElementById('matchList');
      list.innerHTML = '';
      if (league === 'その他') {
        location.href = '/match/other' + (utmQuery || '');
        return;
      }
      const secData = matchesData[league] || {};
      const frag = document.createDocumentFragment();

      Object.entries(secData).forEach(([section, data]) => {
        (data.matches || []).forEach(m => {
          const card = document.createElement('div');
          card.className = 'match-card';

          // 先読み（体感高速化）
          const prefetch = document.createElement('link');
          prefetch.rel = 'prefetch'; prefetch.href = buildMatchUrl(m.id);
          document.head.appendChild(prefetch);

          card.innerHTML = `
            <h3>${m.home} vs ${m.away}</h3>
            <button class="vote-btn" data-mid="${m.id}" aria-label="${m.home}対${m.away}に投票ページへ">ピカイチ投票</button>
          `;
          frag.appendChild(card);
        });
      });
      list.appendChild(frag);

      // クリック委譲（計測・URL統一）
      list.onclick = (e)=>{
        const btn = e.target.closest('.vote-btn');
        if(!btn) return;
        const id = btn.getAttribute('data-mid');
        location.href = buildMatchUrl(id);
      };

      // 表示位置へ
      setTimeout(scrollToList, 0);
    }

    function scrollToList(){
      const list=document.getElementById('matchList');
      if(list){ list.scrollIntoView({behavior:'smooth', block:'start'}); }
    }

    // ---- カウントダウン（FOMO） ----
    function updateTimer(){
      const now = new Date();
      const close = new Date(); close.setHours(23,59,59,999);
      const diff = close - now;
      const t = document.getElementById('voteTimer');
      const mini = document.getElementById('miniDeadline');
      if(diff>0){
        const h = String(Math.floor(diff/3600000)).padStart(2,"0");
        const m = String(Math.floor((diff%3600000)/60000)).padStart(2,"0");
        const text = `本日の投票 締切まで残り ${h}:${m}`;
        if(t) t.textContent = text;
        if(mini) mini.textContent = `締切 ${h}:${m}`;
      }else{
        if(t) t.textContent = "本日の投票は締切ました";
        if(mini) mini.textContent = "締切";
      }
    }
    setInterval(updateTimer, 1000); updateTimer();

    // ---- 初期リーグ決定（SNSパラメータ > 前回選択 > 既定J1） ----
    function getInitialLeague(){
      const fromQS = qs.get("league");
      if(fromQS) return fromQS;
      try {
        const last = sessionStorage.getItem('lastLeague');
        if(last) return last;
      } catch(e){}
      return "J1";
    }

    // ---- スクロールで下部CTA表示（“今押す”を促す） ----
    (function setupStickyCTA(){
      const sticky = document.getElementById('stickyCta');
      const hero = document.getElementById('hero');
      if(!sticky || !hero) return;
      const obs = new IntersectionObserver(entries=>{
        entries.forEach(entry=>{
          // ヒーローが見えていない＝ユーザーが下に居る → CTA表示
          sticky.style.display = entry.isIntersecting ? 'none' : 'block';
        });
      }, {threshold: 0.01});
      obs.observe(hero);
    })();

    // ---- 起動 ----
    window.onload = () => { showLeague(getInitialLeague()); };
  </script>
</body>
</html>
